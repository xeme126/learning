


SVN 项目管理方式。 
svn根目录 
Trunk：主开发目录。 
Branches：分支开发目录及测试目录，版本正式发布并生成tag后删除。 
Tags：已发布版本（包括补丁）的存档目录，不允许修改。 
Release：程序发布目录，含运行程序、升级脚本和标准库。由配置管理员在版本发布时创建。 

trunk 
Bin：运行程序存放路径。 
Control：第三方控件存放路径。 
Documents：产品开发文档存放路径。 
Management：项目管理类文档存放路径。 
Procedure：存储过程或包、初始化数据及视图存放路径。 
Script：数据库升级更新脚本存放路径。 
Sources：源代码存放路径。 
Tools：工具存放路径 

Branches 
一级目录为程序修改版本标识，二级目录的目录结构与trunk一致。 

Tags 
一级目录为已发布程序基线版本号，二级目录为子版本标志，比如BL表示基线版本，sp1表示对应基线的第一个大补丁版本呢，三级目录的目录结构与trunk一致。 

Release 
一级目录为已发布程序基线版本号，二级目录如下： 
Bin：执行程序存放位置。 
Bin\Doc：操作手册、安装手册及升级说明存放位置。 
Patch：补丁存放位置 
Procedure：存储过程或包、初始化数据及视图存放位置。 
Script：数据库升级更新脚本存放位置。 
Stddb：标准库存放位置 


开发在branch 分支，当前线上稳定版本在trunk，每次大版本发布，会在release 分支上建立一个tag。 
当线上环境遇到bug 而有一个或多个开发分支存在的时候，可以如下进行： 
1、一般此情况为紧急bug，直接在trunk 上进行修改 
3、将trunk 的改动，在提交前利用svn 的patch 功能，导出改动的patch 
2、测试通过后紧急上线fix，线上验证改动有效 
4、将第2步得到的patch 覆盖到所有的开发分支上，有必要的话，覆盖到release 分支上。 
其实，如果能够灵活利用svn diff 命令，流程还可以更加优化。 



基于楼主项目情况，建议使用SVN的分支。 
我之前负责项目的情况和楼主很相似，用户催着上线、改bug，一边还有新功能要开发。 
结合自己项目的情况，使用SVN分支方式如下： 
首先找一个切入点，定义主干。我项目把主干定义为：与正式库运行项目完全一致（就像正式系统的影子），目的是方便修改bug，排查问题。 
当用户反馈正式系统有bug，那么就从主干上打出分支，在分支上改bug。待测试通过。把这个分支上线，同时主干合并该分支。其他分支合并主干（保证bug在svn范围内都被修复）。 
若有新的需求准备开发，则在主干上打出新分支，在新开的分支上开发。 
大体就是这样，这里有几点楼需要掌控： 
开发前尽量估算出交付的时间，将交付时间差不多的需求，在一个分支上开发，减少分支数量。主干不允许任何人提交代码，除了合并分支。保证主干和正式系统的一致性。 
SVN分支管理的方式，希望楼主能根据项目实际情况灵活运用，毕竟方法是活的！ 
