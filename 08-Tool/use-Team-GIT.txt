

### GIT冲突常见解决方法
是merge 和 patch（应用补丁）时产生冲突。而rebase就是重新设置基准，然后应用补丁的过程，所以也会冲突。
git pull会自动merge，repo sync会自动rebase，所以git pull和repo sync也会产生冲突。当然git rebase就更不用说了。


如果希望保留生产服务器上所做的改动,仅仅并入新配置项, 处理方法如下:
git stash
git pull
git stash pop
然后可以使用git diff -w +文件名 来确认代码自动合并的情况.

反过来,如果希望用代码库中的文件完全覆盖本地工作版本. 方法如下:
git reset --hard
git pull
其中git reset是针对版本,如果想针对文件回退本地修改,使用
[plain] view plain copy
git checkout HEAD file/to/restore  


### 分支管理　###
一、主分支Master
首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。

Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。
二、开发分支Develop
主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。

这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行"合并"（merge）。
Git创建Develop分支的命令：
　　git checkout -b develop master
将Develop分支发布到Master分支的命令：
　　# 切换到Master分支
　　git checkout master
　　# 对Develop分支进行合并
　　git merge --no-ff develop
这里稍微解释一下，上一条命令的--no-ff参数是什么意思。默认情况下，Git执行"快进式合并"（fast-farward merge），会直接将Master分支指向Develop分支。

使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。关于合并的更多解释，请参考Benjamin Sandofsky的《Understanding the Git Workflow》。

三、临时性分支
前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。
但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：
　　* 功能（feature）分支
　　* 预发布（release）分支
　　* 修补bug（fixbug）分支
这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。
四、 功能分支
接下来，一个个来看这三种"临时性分支"。
第一种是功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。

功能分支的名字，可以采用feature-*的形式命名。
创建一个功能分支：
　　git checkout -b feature-x develop
开发完成后，将功能分支合并到develop分支：
　　git checkout develop
　　git merge --no-ff feature-x
删除feature分支：
　　git branch -d feature-x
五、预发布分支
第二种是预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。
预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。
创建一个预发布分支：
　　git checkout -b release-1.2 develop
确认没有问题后，合并到master分支：
　　git checkout master
　　git merge --no-ff release-1.2
　　# 对合并生成的新节点，做一个标签
　　git tag -a 1.2
再合并到develop分支：
　　git checkout develop
　　git merge --no-ff release-1.2
最后，删除预发布分支：
　　git branch -d release-1.2
六、修补bug分支
最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。
修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。

创建一个修补bug分支：
　　git checkout -b fixbug-0.1 master
修补结束后，合并到master分支：
　　git checkout master
　　git merge --no-ff fixbug-0.1
　　git tag -a 0.1.1
再合并到develop分支：
　　git checkout develop
　　git merge --no-ff fixbug-0.1
最后，删除"修补bug分支"：
　　git branch -d fixbug-0.1


1. 本地git库关联远程库    git remote add origin git@server-name:path/repo-name.git 
2. 第一次推送master分支的所有内容  git push -u origin master （第一次要有参数-u，以后提交不用加）
   此后，可以直接这样提交          git push origin master
3. 克隆到本地 git clone 地址 
4. 查看分支：git branch
   创建分支：git branch <name>
   切换分支：git checkout <name> 
   创建+切换分支：git checkout -b <name>
   合并某分支到当前分支：git merge <name>
   删除分支：git branch -d <name>
5. 查看分支合并图  git log --graph   
6. 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，
   能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
   git merge --no-ff -m "merge with no-ff" dev
7. 修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
   当手头工作没有完成时，先把工作现场 git stash一下，然后去修复bug，修复后，再 git stash pop，回到工作现场。
   查看所有的stash记录       git stash list
   恢复 stash                        git stash apply 
  （工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
   一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
   另一种方式是用git stash pop，恢复的同时把stash内容也删了）
8. 如果要丢弃一个没有被合并过的分支
   git branch -D xxx
